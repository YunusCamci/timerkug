[{"/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/index.js":"1","/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/App.js":"2","/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/Layout/Countdown.js":"3","/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/Layout/Clock.js":"4","/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/Layout/Pomodoro.js":"5"},{"size":727,"mtime":1696714766803,"results":"6","hashOfConfig":"7"},{"size":203,"mtime":1696795727108,"results":"8","hashOfConfig":"7"},{"size":9232,"mtime":1699217429759,"results":"9","hashOfConfig":"7"},{"size":1690,"mtime":1699217425027,"results":"10","hashOfConfig":"7"},{"size":7881,"mtime":1699217436784,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"kfsor3",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/index.js",[],[],["31"],"/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/App.js",[],[],"/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/Layout/Countdown.js",["32"],[],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Helmet } from 'react-helmet';\n\nimport '../App.css';\nimport '../Styles/Clock.css';\n\nimport reklam from '../Assets/img/reklam.jpeg';\n\nfunction CountDown() {\n  const [hour, setHour] = useState(\"00\");\n  const [minute, setMinute] = useState(\"00\");\n  const [second, setSecond] = useState(\"00\");\n  const [isActive, setIsActive] = useState(false);\n  const [isCounting, setIsCounting] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [showAd, setShowAd] = useState(false);\n\n  useEffect(() => {\n    let timer;\n\n    if (isActive && (parseInt(hour) > 0 || parseInt(minute) > 0 || parseInt(second) > 0)) {\n      timer = setInterval(() => {\n        let newHour = parseInt(hour);\n        let newMinute = parseInt(minute);\n        let newSecond = parseInt(second);\n\n        if (newSecond > 0) {\n          newSecond--;\n        } else {\n          if (newMinute > 0) {\n            newMinute--;\n            newSecond = 59;\n          } else {\n            if (newHour > 0) {\n              newHour--;\n              newMinute = 59;\n              newSecond = 59;\n            }\n          }\n        }\n\n        setHour(String(newHour).padStart(2, \"0\"));\n        setMinute(String(newMinute).padStart(2, \"0\"));\n        setSecond(String(newSecond).padStart(2, \"0\"));\n\n        if (newHour === 0 && newMinute === 0 && newSecond === 0) {\n          setIsActive(false);\n          setIsCounting(false);\n          setIsModalOpen(true);\n        }\n      }, 1000);\n    } else {\n      clearInterval(timer);\n    }\n\n    return () => clearInterval(timer);\n  }, [hour, minute, second, isActive]);\n\n  const incrementHour = () => setHour(String(parseInt(hour) + 1).padStart(2, \"0\"));\n  const decrementHour = () => setHour(String(Math.max(0, parseInt(hour) - 1)).padStart(2, \"0\"));\n\n  const incrementMinute = () => setMinute(String(parseInt(minute) + 1).padStart(2, \"0\"));\n  const decrementMinute = () => setMinute(String(Math.max(0, parseInt(minute) - 1)).padStart(2, \"0\"));\n\n  const incrementSecond = () => setSecond(String(parseInt(second) + 1).padStart(2, \"0\"));\n  const decrementSecond = () => setSecond(String(Math.max(0, parseInt(second) - 1)).padStart(2, \"0\"));\n\n  const startCountdown = () => {\n    if (!isCounting) {\n      if (hour === \"00\" && minute === \"00\" && second === \"00\") {\n\n        toast.warn(\"Countdown değerlerini ayarlayın!\", {\n          position: \"bottom-center\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          progress: undefined,\n          theme: \"dark\",\n        });\n      } else {\n        setIsActive(true);\n        setIsCounting(true);\n      }\n    }\n  };\n\n  const stopCountdown = () => {\n    if (isActive) {\n      setIsActive(false);\n      setIsCounting(false);\n\n      if (hour !== \"00\" || minute !== \"00\" || second !== \"00\") {\n        toast.info(\"Countdown durdu!\", {\n          position: \"bottom-center\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          progress: undefined,\n          theme: \"dark\",\n        });\n      }\n    }\n  };\n\n  const resetCountdown = () => {\n    setIsActive(false);\n    setIsCounting(false);\n    setHour(\"00\");\n    setMinute(\"00\");\n    setSecond(\"00\");\n\n    if (hour !== \"00\" || minute !== \"00\" || second !== \"00\") {\n      toast.success(\"Countdown sıfırlandı!\", {\n        position: \"bottom-center\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        progress: undefined,\n        theme: \"dark\",\n      });\n    }\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  useEffect(() => {\n    const adTimeout = setTimeout(() => {\n      setShowAd(false);\n    }, 10000);\n\n    return () => clearTimeout(adTimeout);\n  }, []);\n\n  return (\n\n    <div>\n      <Helmet>\n        <title>CountDown | Timerkug</title>\n      </Helmet>\n\n      {showAd && (\n        <div className=\"fixed top-0 left-0 right-0 z-50 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] h-screen\" style={{ backgroundColor: 'rgb(0 0 0 / 95%)' }}>\n          <div className=\"h-screen flex items-center justify-center\" >\n            <div className=\"relative w-full max-w-md max-h-full\">\n              <p>10 Saniye içinde reklam kapancak.</p>\n              <img src={reklam} alt=\"Reklam\" />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isModalOpen && (\n        <div id=\"popup-modal\" tabIndex=\"-1\" className=\"fixed top-0 left-0 right-0 z-50 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] h-screen\" style={{ backgroundColor: 'rgb(0 0 0 / 85%)' }}>\n          <div className=\"h-screen flex items-center\tjustify-center\" >\n            <div className=\"relative w-full max-w-md max-h-full\">\n              <div className=\"relative bg-white rounded-lg shadow dark:bg-gray-700 animate__animated animate__slideInDown\">\n                <button type=\"button\" className=\"absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white\" onClick={closeModal}>\n                  <svg className=\"w-3 h-3\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 14\">\n                    <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\" />\n                  </svg>\n                  <span className=\"sr-only\">Kapat</span>\n                </button>\n                <div className=\"p-6 text-center\">\n                  <svg className=\"mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\">\n                    <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" />\n                  </svg>\n                  <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">Countdown süreniz Tamamlandı!</h3>\n\n                  <button type=\"button\" className=\"text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600\" onClick={closeModal}>Tamam</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n\n\n      <div className=\"clock\">\n        <div className=\"flex flex-col items-center\">\n          <button type=\"button\" style={{ fontSize: 65, color: '#b1b2ff' }} onClick={incrementHour}>+</button>\n          <div className=\"hour\">{hour}</div>\n          <button type=\"button\" style={{ fontSize: 65, color: '#b1b2ff' }} onClick={decrementHour}>-</button>\n        </div>\n\n        <div className=\"colon flex flex-col justify-center\">:</div>\n\n        <div className=\"flex flex-col items-center\">\n          <button type=\"button\" style={{ fontSize: 65, color: '#ffb3b3' }} onClick={incrementMinute}>+</button>\n          <div className=\"minute\">{minute}</div>\n          <button type=\"button\" style={{ fontSize: 65, color: '#ffb3b3' }} onClick={decrementMinute}>-</button>\n        </div>\n\n        <div className=\"colon flex flex-col justify-center\">:</div>\n\n        <div className=\"flex flex-col items-center\">\n          <button type=\"button\" style={{ fontSize: 65, color: '#e79243' }} onClick={incrementSecond}>+</button>\n          <div className=\"second\">{second}</div>\n          <button type=\"button\" style={{ fontSize: 65, color: '#e79243' }} onClick={decrementSecond}>-</button>\n        </div>\n      </div>\n\n      {/* Button alanı */}\n      <div className=\"flex flex-row justify-between\">\n        <div>\n          <Link to=\"/\" className=\"button\" style={{ backgroundColor: \"#e27f23\" }}>Saat'e Dön</Link>\n        </div>\n\n        <div className=\"flex flex-row justify-center\">\n          <button className=\"button\" style={{ backgroundColor: '#b1b2ff' }} onClick={startCountdown}>\n            Başlat\n          </button>\n          <button className=\"button ml-4\" style={{ backgroundColor: '#ffb3b3' }} onClick={stopCountdown}>\n            Durdur\n          </button>\n          <button className=\"button ml-4\" style={{ backgroundColor: '#e79243' }} onClick={resetCountdown}>\n            Sıfırla\n          </button>\n        </div>\n      </div>\n\n      <ToastContainer\n        position=\"bottom-center\"\n        autoClose={3000}\n        limit={3}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n        theme=\"dark\"\n      />\n    </div>\n  );\n}\n\nexport default CountDown;\n","/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/Layout/Clock.js",["33"],[],"import '../Styles/Clock.css';\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { Helmet } from 'react-helmet';\n\nfunction Clock() {\n\n  const [time, setTime] = useState({\n    minutes: new Date().getMinutes(),\n    hours: new Date().getHours(),\n    seconds: new Date().getSeconds()\n  });\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const date = new Date();\n      setTime({\n        minutes: date.getMinutes(),\n        hours: date.getHours(),\n        seconds: date.getSeconds()\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const convertToTwoDigit = (number) => {\n    return number.toLocaleString(\"tr-TR\", {\n      minimumIntegerDigits: 2\n    });\n  };\n\n\n  return (\n    <div>\n      <Helmet>\n        <title>Clock | Timerkug</title>\n      </Helmet>\n\n      <div className=\"clock\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          }}\n        >\n          <div className=\"hour\">{convertToTwoDigit(time.hours)}</div>\n          <Link to=\"/countdown\" className=\"button\" style={{ backgroundColor: \"#e27f23\" }}>Countdown</Link>\n\n        </div>\n        <div className=\"colon\">:</div>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          }}\n        >\n          <div className=\"minute\">{convertToTwoDigit(time.minutes)}</div>\n          <Link to=\"/pomodoro\" className=\"button\" style={{ backgroundColor: \"#ffb3b3\" }}>Pomodoro</Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Clock;\n","/Users/yunus/Desktop/ReactApp/kugclockwebapp/src/Layout/Pomodoro.js",["34"],[],"import React, { useState, useEffect } from 'react';\nimport '../Styles/Clock.css';\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { Helmet } from 'react-helmet';\n\nfunction Pomodoro() {\n  const [running, setRunning] = useState(false);\n  const [workMode, setWorkMode] = useState(true); // true for work, false for break\n  const [minutes, setMinutes] = useState(1);\n  const [seconds, setSeconds] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isMolaModalOpen, setIsMolaModalOpen] = useState(false);\n\n  useEffect(() => {\n    let timer;\n\n    if (running) {\n      timer = setInterval(() => {\n        if (minutes === 0 && seconds === 0) {\n          // Switch between work and break modes\n          if (workMode) {\n            setIsModalOpen(true); // Open the modal when the work session is complete\n\n          } else {\n            setIsMolaModalOpen(true); // Open the mola modal when the break session is complete\n            setWorkMode(true);\n            setMinutes(25); // 25-minute work session\n            setSeconds(0);\n            setRunning(false); // Stop the timer after work session is complete\n          }\n        } else if (seconds === 0) {\n          setMinutes(minutes - 1);\n          setSeconds(59);\n        } else {\n          setSeconds(seconds - 1);\n        }\n      }, 1000);\n    } else {\n      clearInterval(timer);\n    }\n\n    return () => clearInterval(timer); // Cleanup timer on unmount\n  }, [running, minutes, seconds, workMode]);\n\n  const startTimer = () => {\n    setRunning(true);\n  };\n\n  const stopTimer = () => {\n    setRunning(false);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n\n    // Start the break session\n    if (workMode) {\n      setIsMolaModalOpen(false);\n      setWorkMode(false);\n      setMinutes(5); // 5-minute break\n      setSeconds(0);\n      setRunning(true); // Start the timer for the break session\n    }\n  };\n\n  const closeMolaModal = () => {\n    setIsMolaModalOpen(false);\n  };\n\n  return (\n    <div>\n      <Helmet>\n        <title>Pomodoro | Timerkug</title>\n      </Helmet>\n\n      {isModalOpen && (\n        <div id=\"popup-modal\" tabIndex=\"-1\" className=\"fixed top-0 left-0 right-0 z-50 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] h-screen\" style={{ backgroundColor: 'rgb(0 0 0 / 85%)' }}>\n          <div className=\"h-screen flex items-center\tjustify-center\" >\n            <div className=\"relative w-full max-w-md max-h-full\">\n              <div className=\"relative bg-white rounded-lg shadow dark:bg-gray-700 animate__animated animate__slideInDown\">\n                <button type=\"button\" className=\"absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white\" onClick={closeModal}>\n                  <svg className=\"w-3 h-3\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 14\">\n                    <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\" />\n                  </svg>\n                  <span className=\"sr-only\" onClick={closeModal}>Kapat</span>\n                </button>\n                <div className=\"p-6 text-center\">\n                  <svg className=\"mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\">\n                    <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" />\n                  </svg>\n                  <h3 className=\"mb-5 text-base font-semibold text-gray-900 lg:text-xl dark:text-white\">Çalışma Süreniz Tamamlandı!</h3>\n                  <p className=\"text-sm font-normal text-gray-300 m-5\">Mola süresine geçiş yapıyorsunuz.</p>\n\n                  <button type=\"button\" className=\"text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600\" onClick={closeModal}>Tamam</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isMolaModalOpen && (\n        <div id=\"popup-modal\" tabIndex=\"-1\" className=\"fixed top-0 left-0 right-0 z-50 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] h-screen\" style={{ backgroundColor: 'rgb(0 0 0 / 85%)' }}>\n          <div className=\"h-screen flex items-center\tjustify-center\" >\n            <div className=\"relative w-full max-w-md max-h-full\">\n              <div className=\"relative bg-white rounded-lg shadow dark:bg-gray-700 animate__animated animate__slideInDown\">\n                <button type=\"button\" className=\"absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white\" onClick={closeMolaModal}>\n                  <svg className=\"w-3 h-3\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 14\">\n                    <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\" />\n                  </svg>\n                  <span className=\"sr-only\" onClick={closeMolaModal}>Kapat</span>\n                </button>\n                <div className=\"p-6 text-center\">\n                  <svg className=\"mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\">\n                    <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" />\n                  </svg>\n                  <h3 className=\"mb-5 text-base font-semibold text-gray-900 lg:text-xl dark:text-white\">Mola Süresi Tamamlandı!</h3>\n                  <p className=\"text-sm font-normal text-gray-300 m-5\">Çalışma süresine geçiş yapıyorsunuz.</p>\n\n                  <button type=\"button\" className=\"text-gray-500 bg-white hover.bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600\" onClick={closeMolaModal}>Tamam</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"clock\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          }}\n        >\n          <Link to=\"/\" className=\"button\" style={{ backgroundColor: \"#e27f23\" }}>Saat'e Dön</Link>\n          <div className=\"hour\">{String(minutes).padStart(2, '0')}</div>\n          <button className=\"button\" style={{ backgroundColor: '#b1b2ff' }} onClick={startTimer}>\n            Başlat\n          </button>\n        </div>\n        <div className=\"colon\" style={{ marginTop: 50 }}>:</div>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          }}\n        >\n          <div style={{ marginBottom: 50 }}></div>\n          <div className=\"minute\">{String(seconds).padStart(2, '0')}</div>\n          <button className=\"button\" style={{ backgroundColor: '#ffb3b3' }} onClick={stopTimer}>\n            Durdur\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":27,"nodeType":"39","messageId":"40","endLine":2,"endColumn":33},{"ruleId":"37","severity":1,"message":"38","line":3,"column":27,"nodeType":"39","messageId":"40","endLine":3,"endColumn":33},{"ruleId":"37","severity":1,"message":"38","line":3,"column":27,"nodeType":"39","messageId":"40","endLine":3,"endColumn":33},"no-new-object",["41"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-object-constructor"]